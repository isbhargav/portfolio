{
  
    
        "post0": {
            "title": "Matplotlib Guide - p1",
            "content": "What is Matplotlib? . Matplotlib is a plotting library for the Python programming language and its numerical mathematics extension, NumPy. Matplotlib is a powerful and widely used library that provides an object-oriented API for embedding plots into applications using general-purpose GUI toolkits like Tkinter, wxPython, Qt, or GTK+. . This Notebook covers following topics: . Plot charts, individually and in multiples. | Set the Tick, Text, Legend, and Annotate elements of a plot. | Customize the Grid and Spine displays of a plot. | Set the colors for different elements of a plot | Customize the style and appearance of different plot components. | Choose different chart types based on data type and requirement. | Show the distribution of data. | Show the relationship between different variables. | Plot data in 2D and 3D. | . . Anotomy of matplotlib . Figure . The whole Figure, which is marked by the red box, is like a canvas. Everything that we want to draw will be on this canvas. The figure can contain one or more axes plots. Regardless of how many we draw, the figure controls all of the axes. . Axes . The axes are marked by the blue box. They are where the data will appear. While one figure can contain more than one axes, the axes can only belong to one figure. . Axis . The x-axis and the y-axis, both circled in green, are number-line-like objects. They set the graph limits and generate the ticks (the marks on the axis) and the tick labels (the strings labeling the ticks). . Artist . Artist is the collection of objects that know how to use a renderer to paint the canvas or figure. Artist encompasses many objects, such as the title, legend, axis, spine, grid, and tick . . import numpy as np import matplotlib.pyplot as plt plt.style.use(&#39;dark_background&#39;) %matplotlib inline . How to Draw a figure? . To draw a figure in matplotlib you need to follow these basic steps in folowing order . Create dataset | Create canvas | Add data to axes | Show figure | points = np.linspace(-5,5,256) y1 = np.tanh(points) + 0.5 y2 = np.sin(points) - 0.2 # 2. Create canvas/figure fig,ax = plt.subplots(1,1,figsize=(15,9)) # 3. Add data to axes (x,y) ax.hlines(0,-6,6) ax.plot(points,y1,label=&quot;tanh&quot;) ax.plot(points,y2,color=&quot;green&quot;,marker=&#39;.&#39;,linestyle=&#39;dashed&#39;,label=&quot;sin&quot;) # 4. Show the figure plt.show() # To save the image use following lines # fig.savefig(&#39;output/to.png&#39;) # plt.close(fig) . What are ticks? . Ticks are the marks on the x and y axis of the plot. The tick can be a number, a string, or any other notation. When plotting a graph, the axes will set a default tick based on the number ranges of the different axes. . The following are some properties that we can manipulate by setting parameters: . which: Sets the x/y major/minor ticks. The default value is major. | color: Sets the tick color. | labelrotation: Rotates the tick label. | width: Sets the tick width in points. | length: Sets the tick length in points. | direction: Sets the direction of the ticks, either towards the axis or away from it. The default value is out. | . points = np.linspace(-5, 5, 256) y1 = np.tanh(points) + 0.5 y2 = np.sin(points) - 0.2 fig,ax = plt.subplots(dpi=600,figsize=(15,9)) ax.plot(points,y1) ax.plot(points,y2) # Set x Tick ax.set_xticks(np.linspace(-5,5,9)) plt.show() . Changing tick parmas with tick_params() . points = np.linspace(-5, 5, 256) y1 = np.tanh(points) + 0.5 y2 = np.sin(points) - 0.2 fig,ax = plt.subplots(nrows=1,ncols=2,dpi=400,figsize=(10,6)) ax[0].plot(points,y1) ax[0].plot(points,y2) ax[0].set_title(&quot;Original&quot;) ax[1].plot(points,y1) ax[1].plot(points,y2) ax[1].set_title(&quot;Pretty&quot;) ax[1].set_xticks(np.linspace(-5,5,9)) ax[1].tick_params(color=&#39;b&#39;,length=5, width=2,direction=&#39;in&#39;) plt.show() . What is the spine? . Spines are lines that connect the axis tick marks to one another. Spines also note the boundaries of the data area. They can be placed in any position we want. By default, they are the boundary of the entire axes. So, for an axes, we have four spines: . top | bottom | left | right | . set_position() accepts a tuple of (position type, amount) as parameter. The position type has the following types. . axes: places the spine at the specified axes coordinate (from 0.0-1.0) | data: places the spine at the specified data coordinate. | outward: places the spine out from the data area by the specified number of points. | . points = np.linspace(-5, 5, 256) y1 = np.tanh(points) + 0.5 y2 = np.sin(points) - 0.2 fig,ax = plt.subplots(dpi=200) ax.plot(points,y1) ax.plot(points,y2) ax.set_xticks(np.linspace(-5,5,9)) ax.spines[&#39;top&#39;].set_color(&#39;none&#39;) ax.spines[&#39;right&#39;].set_color(&#39;none&#39;) ax.spines[&#39;left&#39;].set_position((&#39;data&#39;,0)) ax.spines[&#39;bottom&#39;].set_position((&#39;axes&#39;,0.5)) # we could use (data,0) plt.show() . points = np.linspace(-5, 5, 256) y1 = np.tanh(points) + 0.5 y2 = np.sin(points) - 0.2 fig, axe = plt.subplots(nrows=1, ncols=2, figsize=(14, 3.5), dpi=400) axe[0].plot(points, y1) axe[0].plot(points, y2) axe[1].plot(points, y1) axe[1].plot(points, y2) axe[1].set_xticks(np.linspace(-5, 5, 7)) axe[1].tick_params(width=0.5, colors=&#39;b&#39;) axe[1].spines[&#39;right&#39;].set_color(&#39;none&#39;) axe[1].spines[&#39;top&#39;].set_color(&#39;none&#39;) axe[1].spines[&#39;left&#39;].set_position((&#39;data&#39;, 0)) axe[1].spines[&#39;bottom&#39;].set_position((&#39;axes&#39;, 0.5)) . What is legend? . A legend provides a description for an element in the figure. A legend helps the user understand a figure when the figure contains many elements. . fig,(ax1,ax2) = plt.subplots(1,2,dpi=200,figsize=(10,6)) ax1.plot(points,y1) ax1.plot(points,y2) ax2.plot(points,y1,label=&quot;tanh&quot;) ax2.plot(points,y2,label=&quot;sin&quot;) ax2.legend() plt.show() . Customizing legend properties . As with other elements in a figure, legend supports many customizable properties, including location, display style, box style, and shadow. The following are some of the most used properties: . loc: The location of the legend. The most important and commonly used attribute. The strings &#39;upper left&#39;, &#39;upper right&#39;, &#39;lower left&#39;, &#39;lower right&#39; place the legend at the corresponding corner of the axes/figure. The strings &#39;upper center&#39;, &#39;lower center&#39;, &#39;center left&#39;, &#39;center right&#39; place the legend at the center of the corresponding edge of the axes/figure. | fontsize: The font size of the legend. | ncol: The number of columns that the legend will have. The default value is 1. | frameon: Controls whether the legend will be drawn with frame. | shadow: Controls whether a shadow will be drawn behind the legend. | title: Sets a title for the legend. | facecolor: Sets the legend’s background color. | edgecolor: Sets the legend’s frame color. | . ax.legend(loc=&#39;upper center&#39;, title=&quot;This is a legend&quot;, shadow=True, ncol=2, facecolor=&#39;r&#39;) . fig, axe = plt.subplots(nrows=1, ncols=2, dpi=800, figsize=(12, 4)) axe[0].plot(points, y1) axe[0].plot(points, y2) axe[0].set_xticks(np.linspace(-5, 5, 9)) axe[0].tick_params(width=2, colors=&#39;b&#39;) axe[0].spines[&#39;right&#39;].set_color(&#39;none&#39;) axe[0].spines[&#39;top&#39;].set_color(&#39;none&#39;) axe[0].spines[&#39;left&#39;].set_position((&#39;data&#39;, 0)) axe[0].spines[&#39;bottom&#39;].set_position((&#39;axes&#39;, 0.5)) axe[1].plot(points, y1, label=&quot;tanh&quot;) axe[1].plot(points, y2, label=&quot;sin&quot;) axe[1].set_xticks(np.linspace(-5, 5, 9)) axe[1].tick_params(width=2, colors=&#39;b&#39;) axe[1].spines[&#39;right&#39;].set_color(&#39;none&#39;) axe[1].spines[&#39;top&#39;].set_color(&#39;none&#39;) axe[1].spines[&#39;left&#39;].set_position((&#39;data&#39;, 0)) axe[1].spines[&#39;bottom&#39;].set_position((&#39;axes&#39;, 0.5)) axe[1].legend(loc=&quot;upper left&quot;,frameon=False ) plt.show() . What is annotate? . Annotate is a piece of text that identifies a specific data point on a graph, designed to help users understand charts. For example, annotate can be used to give a detailed explanation of the inflection point of a chart. . Adding a basic annotation . xy : The point (x, y) to be annotated, which is a tuple. | xytext : The position (x,y) where the text will appear. None defaults to xy. | xycoords : The coordinate system that xy is given in.(xycoords=‘data’ ) | textcoords : The coordinate system that xytext is given in. | arrowprops : The properties used to draw an arrow between xy and xytext. | . fig,ax = plt.subplots(dpi=200) ax.plot(points,y1) ax.plot(points,y2) ax.annotate(&quot;1.464=tanh(2)+0.5&quot;,xy=(2,1.468),xycoords=&quot;data&quot;,xytext=(0.4,-40),textcoords=&#39;offset points&#39;,arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.5&quot;)) . Text(0.4, -40, &#39;1.464=tanh(2)+0.5&#39;) . Changing the style of the annotation by using bbox . we’ve set the border to have rounded corners by using boxstyle=&quot;round&quot;. . The fc stands for fore color, which we’ve set as invisible. . The ec stands for edge color, which we’ve set to gray. . fig, axe = plt.subplots(dpi=800, figsize=(9, 5)) axe.plot(points, y1) axe.plot(points, y2) axe.legend([&quot;tanh&quot;, &quot;sin&quot;]) axe.annotate(&quot;style1&quot;, xy=(2, 1.464), xycoords=&quot;data&quot;, xytext=(0.4, -40), textcoords=&#39;offset points&#39;, arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.5&quot;), bbox=dict(boxstyle=&quot;round&quot;, fc=&quot;none&quot;, ec=&quot;gray&quot;)) axe.annotate(&quot;style2&quot;, xy=(2, 1.464), xycoords=&quot;data&quot;, xytext=(-200, -40), textcoords=&#39;offset points&#39;, arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.5&quot;), bbox=dict(boxstyle=&quot;round&quot;, alpha=0.1),) axe.annotate(&quot;style3&quot;, xy=(2, 1.464), xycoords=&quot;data&quot;, xytext=(-160, -80), textcoords=&#39;offset points&#39;, arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.5&quot;), bbox=dict(boxstyle=&quot;round4,pad=.5&quot;, fc=&quot;0.3&quot;)) . Text(-160, -80, &#39;style3&#39;) . What is text? . Text is basically a simpler version of annotate. Unlike annotate, we don’t need to anchor our text to one specific data location. . text(0.5, 0.5, &#39;function&#39;, horizontalalignment=&#39;center&#39;,verticalalignment=&#39;center&#39;, transform=ax.transAxes) . If we want to put a frame around the text, we can use the option bbox. The example code below adds a box with a red background to our text. . text(10, 20, &quot;function&quot;, bbox=dict(facecolor=&#39;red&#39;, alpha=0.5)) . fig, axe = plt.subplots(figsize=(7, 3.5), dpi=300) axe.plot(points, y1) axe.plot(points, y2) axe.legend([&quot;tanh&quot;, &quot;sin&quot;]) axe.text(-2.5, 0.5, &quot;two function nOne nTwo&quot;, bbox=dict(facecolor=&#39;red&#39;, alpha=0.5)) plt.show() . fig, axe = plt.subplots(figsize=(7, 3.5), dpi=800) axe.plot(points, y1) axe.plot(points, y2) axe.legend([&quot;tanh&quot;, &quot;sin&quot;]) eq = r&quot;$ int_a^b{ sin(x)} dx$&quot; font = {&#39;family&#39;: &#39;serif&#39;, &#39;color&#39;: &#39;darkred&#39;, &#39;weight&#39;: &#39;normal&#39;, &#39;size&#39;: 16, } axe.text(-3, 0.18, eq, font) . Text(-3, 0.18, &#39;$ int_a^b{ sin(x)} dx$&#39;) . What is grid? . The grid consists of lines that connect to each of the ticks that we have set. These lines help the user locate the curve in the diagram more quickly, making the image more readable. . fig, axe = plt.subplots(figsize=(7, 3.5), dpi=300) axe.plot(points, y1) axe.plot(points, y2) axe.legend([&quot;tanh&quot;, &quot;sin&quot;]) axe.annotate(&quot;1.464=tanh(2)+0.5&quot;, xy=(2, 1.464), xycoords=&quot;data&quot;, xytext=(0.4, -40), textcoords=&#39;offset points&#39;, arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.5&quot;)) axe.minorticks_on() axe.grid(which=&#39;major&#39;, linestyle=&#39;-&#39;, linewidth=&#39;0.5&#39;, color=&#39;blue&#39;) axe.grid(which=&#39;minor&#39;, linestyle=&#39;:&#39;, linewidth=&#39;0.5&#39;, color=&#39;red&#39;) . Adding a title for the axes . fig, axe = plt.subplots(figsize=(7, 3.5), dpi=300) axe.plot(points, y1) axe.plot(points, y2) axe.legend([&quot;tanh&quot;, &quot;sin&quot;]) axe.set_title(&quot;two functions&quot;) axe.set_title(&quot;two functions left&quot;, loc=&quot;left&quot;) axe.set_title(&quot;two functions right&quot;, loc=&quot;right&quot;) . Text(1.0, 1.0, &#39;two functions right&#39;) . fig, axe = plt.subplots(1,2, figsize=(14, 3.5), dpi=300) axe[0].plot(points, y1) axe[0].set_title(&quot;tanh functions&quot;) axe[1].plot(points, y2) axe[1].set_title(&quot;sin functions&quot;) fig.suptitle(&quot;tanh &amp; sin function&quot;) . Text(0.5, 0.98, &#39;tanh &amp; sin function&#39;) . Placing Multiple Plots onto One Figure Using Subplots . In order to prevent clipping, we can call plt.tight_layout(). The constrained layout helps us adjust our elements to fit them comfortably onto the figure. . fig, axe = plt.subplots(nrows=2, ncols=2, dpi=800) plt.tight_layout() axe[1][0].set_title(&quot;the third subplot&quot;) axe[1][1].set_title(&quot;the forth subplot&quot;) . Text(0.5, 1.0, &#39;the forth subplot&#39;) . Colors . Different ways to specify colors . x = np.linspace(-4, 4, 200) fig, axe = plt.subplots(dpi=300) # RGB axe.plot(x, x + 2, color=(0.1, 0.6, 1.0), label=&quot;RGB&quot;) # HEX RGB axe.plot(x, x + 3, color=&quot;#6F4F3F&quot;, label=&quot;Hex&quot;) # single color letter axe.plot(x, x + 4, color=&#39;r&#39;, label=&quot;single letter&quot;) # color name axe.plot(x, x + 5, color=&#39;green&#39;, label=&quot;color name&quot;) # Tableau color axe.plot(x, x + 6, color=&#39;tab:olive&#39;, label=&quot;Tableau&quot;) # gray level axe.plot(x, x + 7, color=&#39;0.7&#39;, label=&quot;gray level&quot;) . [&lt;matplotlib.lines.Line2D at 0x7f87d6f86f60&gt;] .",
            "url": "https://isbhargav.github.io/portfolio/jupyter/2020/11/13/matplotlib_guide1.html",
            "relUrl": "/jupyter/2020/11/13/matplotlib_guide1.html",
            "date": " • Nov 13, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://isbhargav.github.io/portfolio/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://isbhargav.github.io/portfolio/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://isbhargav.github.io/portfolio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://isbhargav.github.io/portfolio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}